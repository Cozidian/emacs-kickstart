#+Title: My Emacs Kickstarter
#+Author: Christoffer Berglund
#+Description: A starting point for Gnu Emacs with good defaults and packages that most people may want to use.
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#introduction][Introduction]]
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#use-package][Use Package]]
  - [[#add-ripgrep-and-ag][Add ripgrep and ag]]
  - [[#set-homebrew-path][Set homebrew path]]
  - [[#set-env-paths][Set env paths]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#good-defaults][Good Defaults]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
- [[#ai][AI]]
  - [[#mcp][mcp]]
  - [[#gptel][gptel]]
  - [[#aidermacs][Aidermacs]]
- [[#development][Development]]
  - [[#vterm][Vterm]]
  - [[#projectile][Projectile]]
  - [[#company][Company]]
  - [[#lsp-mode][Lsp-mode]]
  - [[#evil-commenter][Evil commenter]]
  - [[#markdown-mode][Markdown mode]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#using-the-file][Using the file]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
- [[#runtime-performance][Runtime Performance]]

* Introduction
#+begin_src emacs-lisp
    ;; Kickstart.emacs is *not* a distribution.
    ;; It's a template for your own configuration.

    ;; It is *recommeded* to configure it from the *config.org* file.
    ;; The goal is that you read every line, top-to-bottom, understand
    ;; what your configuration is doing, and modify it to suit your needs.

    ;; You can delete this when you're done. It's your config now. :)
#+end_src

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Use Package
We use the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc.) are useful if you want to
install packages from git repositories, if you want a specific, not very popular package that is not available on elpa or melpa,
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their git repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
Check out the use-package [[https://www.gnu.org/software/emacs/manual/use-package.html][documentation]] to see how to use it.
With Emacs 29 use-package is now built-in.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** Add ripgrep and ag 
#+begin_src emacs-lisp :tangle yes
(use-package ripgrep :ensure t)
(use-package ag :ensure t)
#+end_src

#+RESULTS:

** Set homebrew path
#+begin_src emacs-lisp
(add-to-list 'exec-path "/opt/homebrew/bin")
(setenv "PATH" (concat "/opt/homebrew/bin:" (getenv "PATH")))
#+end_src

#+RESULTS:
: /opt/homebrew/bin:/Users/christofferberglund/Library/Python/3.9/bin:/Users/christofferberglund/.local/bin:/opt/homebrew/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/podman/bin:/Applications/Emacs.app/Contents/MacOS/bin-arm64-11:/Applications/Emacs.app/Contents/MacOS/libexec-arm64-11:/Users/christofferberglund/.lmstudio/bin

** Set env paths
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :if (memq window-system '(mac ns x)) ;; Only needed on macOS/NS
      :config
      (setq exec-path-from-shell-variables '("PATH" "OPENROUTER_API_KEY"))
      (exec-path-from-shell-initialize))
#+end_src

#+RESULTS:
: t

** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

If you don't want to use evil-mode don't forget to remove:
- Messages buffer fix in Good default section (:ghook)
- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
#+begin_src emacs-lisp
    (use-package evil
      :init ;; Execute code Before a package is loaded
      (evil-mode)
      :config ;; Execute code After a package is loaded
      (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
      :custom ;; Customization of package custom variables
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-redo) ;; C-r to redo
      (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult))
      (evil-collection-init))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup)
      ;; Set up 'SPC' as the leader key
      (general-create-definer start/leader-keys
        :states '(normal insert visual motion emacs)
        :keymaps 'override
        :prefix "SPC"           ;; Set leader key
        :global-prefix "C-SPC") ;; Set global leader key

      (start/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map")
    	":" '(execute-extended-command :wk "M-x"))

      (start/leader-keys
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f r" '(consult-recent-file :wk "Recent files")
        "f f" '(consult-fd :wk "Fd search for files")
        "f g" '(consult-ripgrep :wk "Ripgrep search in files")
        "f l" '(consult-line :wk "Find line")
        "f s" '(save-buffer :wk "File save")
        "f i" '(consult-imenu :wk "Imenu buffer locations"))

      (start/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(consult-buffer :wk "Switch buffer")
        "b k" '(kill-current-buffer :wk "Kill this buffer")
        "b i" '(ibuffer :wk "Ibuffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b j" '(consult-bookmark :wk "Bookmark jump"))

      (start/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current"))

      (start/leader-keys
        "w" '(:ignore t :wk "Window")
        "w d" '(evil-window-delete :wk "Window delete")
    	"w D" '(delete-other-windows :wk "Delete other windows")
        "w s" '(evil-window-split :wk "Window split")
        "w v" '(evil-window-vsplit :wk "Window split vertical")
        "w h" '(evil-window-left :wk "Window left")
        "w H" '(evil-window-move-far-left :wk "Window move left")
        "w l" '(evil-window-right :wk "Window right")
        "w L" '(evil-window-move-far-right :wk "Window move right")
        "w k" '(evil-window-up :wk "Window up")
        "w K" '(evil-window-move-very-top :wk "Window move up")
        "w j" '(evil-window-down :wk "Window down")
        "w J" '(evil-window-move-very-bottom :wk "Window move down"))

      (start/leader-keys
        "g" '(:ignore t :wk "Git")
        "g g" '(magit-status :wk "Magit status"))

      (start/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
        "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload Emacs config"))

      (start/leader-keys
        "s" '(:ignore t :wk "Show")
        "s e" '(eat :wk "Eat terminal"))

      (start/leader-keys
        "o" '(:ignore t :wk "Org")
        "o a" '(org-agenda :wk "Org agenda")
    	"o c" '(org-capture :wk "Org capture"))

      (start/leader-keys
        "q" '(:ignore t :wk "Quit")
        "q q" '(evil-quit-all :wk "Quit emacs"))

      (start/leader-keys
        "t" '(:ignore t :wk "Toggle")
    	"t b" '(my/toggle-big-font :wk "Toggle big font")
        "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers"))
      (start/leader-keys
    	"c" '(:ignore t :wk "Code"))
      (general-define-key
       :states '(normal visual)
       :keymaps 'override
       "gc" 'evilnc-comment-operator)
      )
#+end_src

#+RESULTS:
: t

*** Mac norwegian keybroad setup
#+begin_src emacs-lisp
    (setq mac-right-option-modifier 'none)
    (setq ns-right-option-modifier 'none)
#+end_src

#+RESULTS:
: none


** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      ;;(inhibit-startup-screen t)  ;; Disable welcome screen
      
      (display-time-mode 1)

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      ;;(recentf-mode t) ;; Enable recent file mode

      ;;(global-visual-line-mode t)           ;; Enable truncated lines
      (display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers

      (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling
      ;;(scroll-margin 8)

      (tab-width 4)

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             )
      ;; Fix general.el leader key not working instantly in messages buffer with evil mode
      :ghook ('after-init-hook
              (lambda (&rest _)
                (when-let ((messages-buffer (get-buffer "*Messages*")))
                  (with-current-buffer messages-buffer
                    (evil-normalize-keymaps))))
              nil nil t)
      )
#+end_src

* Appearance
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
    ;; (use-package gruvbox-theme
    ;;   :config
    ;;   (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
(use-package doom-themes
  :ensure t
  :custom
  ;; Global settings (defaults)
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; for treemacs users
  (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  :config
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (nerd-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

#+RESULTS:
: t

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ;; For all new frames henceforth
#+end_src

#+RESULTS:
: ((alpha-background . 90) (vertical-scroll-bars))

** Fonts
*** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 160
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

*** Big font mode
#+begin_src emacs-lisp
(defvar my/default-font "JetBrains Mono")
(defvar my/default-font-size 160)
(defvar my/big-font-size 220) ;; Or however big you want it

(defun my/set-font-size (size)
  "Set the default font size to SIZE (in 1/10 pt)."
  (interactive "nFont size (10x pt): ")
  (set-face-attribute 'default nil :font my/default-font :height size))

(defvar my/big-font-enabled nil)

(defun my/toggle-big-font ()
  "Toggle between default and big font sizes."
  (interactive)
  (setq my/big-font-enabled (not my/big-font-enabled))
  (my/set-font-size (if my/big-font-enabled my/big-font-size my/default-font-size))
  (message "Font size set to %s" (if my/big-font-enabled "BIG" "normal")))

#+end_src

#+RESULTS:
: my/toggle-big-font

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

* AI
** mcp
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs-extra/mcp.el") ;; adjust if needed

(use-package mcp
  :ensure nil  ;; don't pull from MELPA
  :config
  (require 'mcp-hub)
  :hook (after-init . mcp-hub-start-all-server))
#+end_src

#+RESULTS:
| org-persist-load-all | mcp-hub-start-all-server | general--transient-1-for-hook | tramp-register-archive-autoload-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

** gptel
gptel install and setup
#+begin_src emacs-lisp
    (use-package gptel
      :ensure t
      :config
      (setq gptel-api-key #'(lambda () (getenv "OPENROUTER_API_KEY")))

      (setq gptel-backend
            (gptel-make-openai
             "OpenRouter"
             :host "openrouter.ai"
             :endpoint "/api/v1/chat/completions"
             :stream t
             :key gptel-api-key
             :models '(google/gemini-2.0-flash-001
    				   google/gemini-2.5-flash-preview-05-20
                       ;; other models optional
                       )))

      (setq gptel-default-backend gptel-backend
            gptel-model 'google/gemini-2.0-flash-001
            gptel-default-mode 'org-mode)

      (add-hook 'gptel-post-response-functions 'gptel-end-of-response)

      (require 'gptel-integrations)
      (setq mcp-hub-servers nil)
      (setq mcp-hub-servers 
    		'(("github" . (:command "docker"
    								))))

      (setq mcp-hub-servers 
    		`(("github" . (:command "docker"
    								:args ("run" "--rm" "-i" "-e" "GITHUB_PERSONAL_ACCESS_TOKEN" "ghcr.io/github/github-mcp-server") 
    								:env (:GITHUB_PERSONAL_ACCESS_TOKEN ,(getenv "GITHUB_MCP_PAT"))))))

      (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "@user\n")
      (setf (alist-get 'org-mode gptel-response-prefix-alist) "@assistant\n"))
#+end_src

#+RESULTS:
: t

** Aidermacs
#+begin_src emacs-lisp
    (use-package aidermacs
      :bind (("C-c a" . aidermacs-transient-menu))
      :config
      ; defun my-get-openrouter-api-key yourself elsewhere for security reasons

      (setenv "OPENROUTER_API_KEY" (getenv "OPENROUTER_API_KEY"))
      :custom
      ; See the Configuration section below
      (aidermacs-default-chat-mode 'architect)
      (aidermacs-default-model "sonnet"))
#+end_src

#+RESULTS:
: aidermacs-transient-menu

* Development
** Vterm
#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src

#+RESULTS:

** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode)
      :custom
      (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
      (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
      (projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))) ;; . 1 means only search the first subdirectory level for projects
    ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company
  :hook (lsp-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0))  ;; show completions immediately
#+end_src

#+RESULTS:
| company-mode | dap-tooltip-update-mouse-motions-if-enabled | lsp-enable-which-key-integration |

** Lsp-mode 
#+begin_src emacs-lisp
        (use-package lsp-mode
          :init
          ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
          (setq lsp-keymap-prefix "C-c l")
          :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
                 (typescript-mode . lsp)
                 (emacs-lisp-mode . lsp)
                 ;; if you want which-key integration
                 (lsp-mode . lsp-enable-which-key-integration))
          :commands (lsp lsp-deferred))

        ;; optionally
        (use-package lsp-ui :commands lsp-ui-mode)
        ;; if you are helm user
        (use-package helm-lsp :commands helm-lsp-workspace-symbol)
        ;; if you are ivy user
        (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
        (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

        ;; optionally if you want to use debugger
        (use-package dap-mode)
        ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

        ;; optional if you want which-key integration
    (use-package which-key
            :config
            (which-key-mode))

(add-hook 'org-src-mode-hook
          (lambda ()
            ;; Only try to start LSP in the source edit buffer if it's Emacs Lisp
            (when (derived-mode-p 'emacs-lisp-mode)
              (lsp-deferred))))
#+end_src

#+RESULTS:
| #[nil ((when (derived-mode-p 'emacs-lisp-mode) (lsp-deferred))) nil] | org-src-babel-configure-edit-buffer | org-src-mode-configure-edit-buffer |

** Evil commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :ensure t)
#+end_src

#+RESULTS:

** Markdown mode
Need this for lsp-bridge
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Language modes
It's not required for every language like C,C++,C#,Java,Javascript etc. to install language mode packages,
but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter, check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]] or try out [[https://github.com/renzmann/treesit-auto][Treesit-auto]].
Currently it's tedious to use Treesitter, because emacs has not yet fully migrated to it.
*** Treesit
#+begin_src emacs-lisp
(use-package treesit-auto
  :custom
  (treesit-auto-install 't)    ; or 't for silent
  :config
  (global-treesit-auto-mode)
  (treesit-auto-add-to-auto-mode-alist 'all))
#+end_src
*** Lua mode
Example, how to setup a language mode (if you don't want it, feel free to delete it).
Use SPC-tab to uncomment the lines.
# #+begin_src emacs-lisp
#     (use-package lua-mode
#       :mode "\\.lua\\'") ;; Only start in a lua file
# #+end_src
*** Typescript mode
#+begin_src emacs-lisp
    (use-package typescript-mode 
      :ensure t
      :hook (typescript-mode . lsp-deferred)
    )
#+end_src

#+RESULTS:
| typescript-mode |

*** Typescript lsp 
#+begin_src emacs-lisp
#+end_src
*** Org Mode
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
      (org-agenda-files (append
        				 (directory-files-recursively "~/org" "\\.org$")
        				 (directory-files-recursively "~/notes" "\\.org$")))

      (org-directory "~/org")
      (org-default-notes-file (expand-file-name "inbox.org" org-directory))
      (org-capture-templates
       '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
          "* TODO %?\n  %U\n  %a")
         ("n" "Note" entry (file+headline "~/org/notes.org" "Notes")
          "* %?\n  %U\n  %a")
         ("i" "Inbox" entry (file "~/org/inbox.org")
          "* %?\nEntered on %U\n  %i\n  %a")))
      (org-log-into-drawer t)
      (org-clock-into-drawer t)
      (org-todo-keywords
       '((sequence "TODO(t)" "IN-PROGRESS(p)" "|" "DONE(d)")
         (sequence "WAIT(w)" "HOLD(h)" "|" "CANCELLED(c)")))
      
      (org-log-done 'time) ;; Log timestamp when marked DONE
      (org-log-into-drawer t) ;; Store logs in :LOGBOOK: drawer

      (org-confirm-babel-evaluate nil)
      (org-pretty-entities t) ;; Replace things like \alpha with α
      (org-hide-emphasis-markers t) ;; Hide *bold* markers visually


      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      ;;(org-mode . (lambda ()
      ;;              (setq-local electric-pair-inhibit-predicate
      ;;                          `(lambda (c)
      ;;                             (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

#+RESULTS:
| org-tempo-setup | org-superstar-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | toc-org-mode | org-indent-mode | #[nil ((if (cl-every #'(lambda (pred) (lsp-bridge-check-predicate pred global-lsp-bridge-mode)) lsp-bridge-enable-predicates) (progn (lsp-bridge-mode 1)))) (t)] | #[nil ((add-hook 'after-save-hook #'start/org-babel-tangle-config)) nil] |

**** Org babel generel
#+begin_src emacs-lisp
(use-package ob-typescript
  :ensure t
  :after org)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (js . t)
   (typescript . t)))
#+end_src

**** Htmlize
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src

#+RESULTS:

**** Org reveal
#+begin_src emacs-lisp
    (add-to-list 'load-path "~/.config/emacs-extra/org-reveal")
    (require 'ox-reveal)
#+end_src

#+RESULTS:
: ox-reveal

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (setq org-superstar-remove-leading-stars t)
    (setq org-superstar-special-todo-items t)
    (setq org-superstar-headline-bullets-list '("●" "○" "◆" "◇" "▸"))
    (setq org-superstar-leading-bullet ?\s) ;; Use space instead of . or anything
    (setq org-hide-leading-stars nil) ;; Optional, shows all stars if you want
    (setq org-indent-mode-turns-on-org-indent nil) ;; 🔥 the important bit

    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src
*** Denote
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode)
  :bind
  (("C-c n n" . denote)
   ("C-c n r" . denote-rename-file)
   ("C-c n l" . denote-link)
   ("C-c n b" . denote-backlinks)
   ("C-c n d" . denote-dired)
   ("C-c n g" . denote-grep))
  :config
  (setq denote-directory (expand-file-name "~/notes/"))

  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have, for example, a literal
  ;; "[D]" followed by the file's title.  Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (denote-rename-buffer-mode 1))
#+end_src

#+RESULTS:
: denote-grep

** Terminal
*** Eat
Eat(Emulate A Terminal) is a terminal emulator within Emacs.
It's more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell, if you want to use bash, zsh etc., check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to emacs's load path to search for elisp files.
This is necessary, because emacs does not search the entire user-emacs-directory.
The directory name can be anything, just add it to the load-path.
#+begin_src emacs-lisp
    ;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

** Sourcing the files
To use the elisp files we need to load it.
Notes:
- Don't forget the file and the provide name needs to be the same.
- When naming elisp files, functions, it is recommended to use a group name (e.g init-, start- or any custom name), so it does not get mixed up with other names, functions.
#+begin_src emacs-lisp
    ;; (require 'start-multiFileExample)
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
    ;; (start/hello)
#+end_src

* Other Packages
All the package setups that don't need much tweaking.
** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      ;; :custom (magit-diff-refine-hunk (quote all)) ;; Shows inline diff
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      ;; (consult-customize
      ;; consult-theme :preview-key '(:debounce 0.2 any)
      ;; consult-ripgrep consult-git-grep consult-grep
      ;; consult-bookmark consult-recent-file consult-xref
      ;; consult--source-bookmark consult--source-file-register
      ;; consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      ;; :preview-key '(:debounce 0.4 any))

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
       ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
      ;; (setq consult-project-function nil)
      )
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :ensure nil ;; Don't install which-key because it's now built-in
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
